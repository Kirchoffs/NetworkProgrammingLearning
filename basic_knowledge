/* General socket address */
typedef unsigned short int sa_family_t;
struct sockaddr {
    sa_family_t sa_family;  /* address family 16-bit */
    char sa_data[14];   /* specific address value 112-bit */
}; 



/* IPv4 socket address  */
typedef uint32_t in_addr_t;
struct in_addr {
    in_addr_t s_addr;
};
struct sockaddr_in {
    sa_family_t sin_family; /* 16-bit */
    in_port_t sin_port;     /* port number 16-bit */
    struct in_addr sin_addr;    /* internet address 32-bit */

    /* just for place holder */
    unsigned char sin_zero[8];
};



/* IPv6 socket address */
struct sockaddr_in6 {
    sa_family_t sin6_family; /* 16-bit */
    in_port_t sin6_port;  /* port number 16-bit */
    uint32_t sin6_flowinfo; /* IPv6 flow info 32-bit*/
    struct in6_addr sin6_addr;  /* IPv6 address 128-bit */
    uint32_t sin6_scope_id; /* IPv6 scope ID 32-bit */
};



/* local socket address */
struct sockaddr_un {
    unsigned short sun_family; /* It should be AF_LOCAL */
    char sun_path[108];   /* path name */
};



/* TCP */
int listen(int socketfd, int backlog)
int accept(int listensockfd, struct sockaddr *cliaddr, socklen_t *addrlen)
int connect(int sockfd, const struct sockaddr *servaddr, socklen_t addrlen)

ssize_t write (int socketfd, const void *buffer, size_t size)
ssize_t send (int socketfd, const void *buffer, size_t size, int flags)
ssize_t sendmsg(int sockfd, const struct msghdr *msg, int flags)



/* UDP */
ssize_t recvfrom(int sockfd, void *buff, size_t nbytes, int flags, struct sockaddr *from, socklen_t *addrlen); 
ssize_t sendto(int sockfd, const void *buff, size_t nbytes, int flags, const struct sockaddr *to, socklen_t addrlen); 


/* close the TCP socket */
int close(int sockfd)

// howto: SHUT_RD(0), SHUT_WR(1), SHUT_RDWR(2)
int shutdown(int sockfd, int howto)